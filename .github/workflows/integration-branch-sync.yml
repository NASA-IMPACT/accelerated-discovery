name: Integration Branch Sync
on:
  pull_request:
    types: [opened, synchronize, reopened]
    branches: [develop]

jobs:
  test-pr-branch:
    name: Run Tests on PR Branch üß™
    runs-on: ubuntu-latest
    steps:
      - name: Checkout PR branch
        uses: actions/checkout@v4
        with:
          ref: ${{ github.head_ref }}
          lfs: "true"
          submodules: "recursive"

      - name: Set up python
        uses: actions/setup-python@v4
        with:
          python-version: "3.12"
          cache: "pip"

      - name: Install requirements
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[dev]"
        working-directory: ${{ vars.CDK_WORKING_DIRECTORY }}

      - name: Run tests with coverage
        id: test
        env:
          PYTHONUNBUFFERED: 1
          FORCE_COLOR: 1
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        run: |
          echo "Checking environment setup..."
          if [ -z "$OPENAI_API_KEY" ]; then
            echo "‚ùå OPENAI_API_KEY is not set"
          else
            echo "‚úÖ OPENAI_API_KEY is set (length: ${#OPENAI_API_KEY})"
            echo "Key starts with: ${OPENAI_API_KEY:0:7}..." # Show first 7 chars safely
          fi

          echo "Running tests..."
          python -m pytest tests/ -v
        working-directory: ${{ vars.CDK_WORKING_DIRECTORY }}

      - name: Upload coverage reports
        uses: actions/upload-artifact@v4
        with:
          name: pr-branch-coverage-report
          path: ${{ vars.CDK_WORKING_DIRECTORY }}/coverage.xml

      - name: Comment PR with test results
        if: always()
        uses: actions/github-script@v7
        with:
          script: |
            const outcome = '${{ steps.test.outcome }}' === 'success' ? '‚úÖ Tests passed' : '‚ùå Tests failed';
            github.rest.issues.createComment({
              issue_number: ${{ github.event.pull_request.number }},
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `PR branch testing results: ${outcome}\n\nBranch: \`${{ github.head_ref }}\`\nPR: #${{ github.event.pull_request.number }}\nCommit: ${{ github.sha }}`
            })

  sync-integration:
    name: Sync Integration Branch
    needs: [test-pr-branch]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout integration branch
        uses: actions/checkout@v4
        with:
          ref: integration
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: Configure Git
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: Merge PR branch into integration
        run: |
          git fetch origin ${{ github.head_ref }}
          git merge origin/${{ github.head_ref }} --no-ff -m "Auto-merge PR #${{ github.event.pull_request.number }} (${{ github.head_ref }}) into integration for testing"

      - name: Push integration branch
        run: git push origin integration

      - name: Create issue on merge conflict
        if: failure()
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: 'Integration branch merge conflict',
              body: `Automatic merge of PR #${{ github.event.pull_request.number }} (${{ github.head_ref }}) into integration failed.\n\nPlease resolve conflicts manually:\n\`\`\`bash\ngit checkout integration\ngit merge origin/${{ github.head_ref }}\n# resolve conflicts\ngit push origin integration\n\`\`\``,
              labels: ['integration', 'conflict']
            })
