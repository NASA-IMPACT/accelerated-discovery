from typing_extensions import TypedDict
from langchain_core.messages import AnyMessage
from typing import List, Optional, Annotated, Dict
from pydantic import BaseModel, Field


# ---------------------------------------------------
# Interview state helper functions
# ---------------------------------------------------

def add_messages(left, right):
    if not isinstance(left, list):
        left = [left]
    if not isinstance(right, list):
        right = [right]
    return left + right


def update_references(references, new_references):
    if not references:
        references = {}
    references.update(new_references)
    return references


def update_editor(editor, new_editor):
    if not editor:
        return new_editor
    return editor


def update_search_results(search_results, new_search_results):
    if not search_results:
        search_results = []
    for res in new_search_results:
        if res not in search_results:
            search_results.append(res)
    return search_results


# ---------------------------------------------------
# Structures
# ---------------------------------------------------

class RelatedSubjects(BaseModel):
    """Related subjects used to generate perspectives"""
    topics: List[str] = Field(
        description="Comprehensive list of related subjects as background research.",
    )


class Editor(BaseModel):
    """Editor working on retrieving information related to the topic"""
    affiliation: str = Field(
        description="Primary affiliation of the editor.",
    )
    name: str = Field(
        description="Name of the editor."
    ) 
    role: str = Field(
        description="Role of the editor in the context of the topic.",
    )
    description: str = Field(
        description="Description of the editor's focus, concerns, and motives.",
    )

    @property
    def persona(self) -> str:
        return f"Name: {self.name}\nRole: {self.role}\nAffiliation: {self.affiliation}\nDescription: {self.description}\n"


class Perspectives(BaseModel):
    """List of perspectives working on the researching the topic"""
    editors: List[Editor] = Field(
        description="Comprehensive list of editors with their roles and affiliations."
    )


class InterviewState(TypedDict):
    """Tracks state of the interview"""
    messages: Annotated[List[AnyMessage], add_messages]
    references: Annotated[Optional[Dict], update_references]
    editor: Annotated[Optional[Editor], update_editor]
    search_results: Annotated[Optional[List], update_search_results]


class Queries(BaseModel):
    """List of decomposed queries from the editor's question"""
    queries: List[str] = Field(
        description="Comprehensive list of search engine queries to answer the user's questions.",
    )


class AnswerWithCitations(BaseModel):
    """Answer generated by the subject matter expert along with citations"""
    answer: str = Field(
        description="Comprehensive answer to the user's question with citations.",
    )
    cited_urls: List[str] = Field(
        description="List of urls cited in the answer.",
    )

    @property
    def as_str(self) -> str:
        return f"{self.answer}\n\nCitations:\n\n" + "\n".join(
            f"[{i+1}]: {url}" for i, url in enumerate(self.cited_urls)
        )