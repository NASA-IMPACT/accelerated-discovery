from langgraph.checkpoint.memory import MemorySaver
from langgraph.graph import END, START, StateGraph
from langgraph.pregel import RetryPolicy
from pydantic import BaseModel, Field, computed_field

from akd.agents._base import BaseAgent
from akd.configs.storm_config import STORM_SETTINGS, StormSettings

from .config import initialise_storm_config
from .nodes import *
from .state import ResearchState


class StormInputSchema(BaseModel):
    """Input schema for storm agent"""

    config: Optional[dict] = Field(
        None,
        description="The configuration dict to track the state of the storm agent.",
    )

    query: str = Field(
        ...,
        description="The topic to create the article for.",
    )

    @computed_field
    @property
    def topic(self) -> str:
        return self.query


class StormOutputSchema(BaseModel):
    """Output schema for storm agent"""

    article: str = Field(
        ...,
        description="The article generated by storm.",
    )
    perspectives: Perspectives = Field(
        ...,
        description="List of editors working on the article",
    )


class StormAgent(BaseAgent):

    input_schema = StormInputSchema
    output_schema = StormOutputSchema

    def __init__(
        self,
        config: Optional[StormSettings] = None,
    ) -> None:
        super().__init__(debug=False)
        # Set this configuration
        config = config or STORM_SETTINGS
        initialise_storm_config(config)

        self.storm_builder = StateGraph(ResearchState)

        nodes = [
            ("init_research", initialize_research),
            # ("hitl_editors", hitl_editors),
            ("conduct_interviews", conduct_interviews),
            ("refine_outline", refine_outline),
            ("index_references", index_references),
            ("write_sections", write_sections),
            ("write_article", write_article),
        ]

        for i in range(len(nodes)):
            name, node = nodes[i]
            self.storm_builder.add_node(name, node, retry=RetryPolicy(max_attempts=3))
            if i > 0:
                self.storm_builder.add_edge(nodes[i - 1][0], name)

        self.storm_builder.add_edge(START, nodes[0][0])
        self.storm_builder.add_edge(nodes[-1][0], END)
        # self.storm = builder_of_storm.compile(checkpointer=MemorySaver())
        # self.storm = builder_of_storm.compile()

    async def arun(self, params: StormInputSchema) -> StormOutputSchema:

        config = params.config or {}
        topic = params.topic

        storm = (
            self.storm_builder.compile(checkpointer=MemorySaver())
            if config
            else self.storm_builder.compile()
        )

        article_state = await storm.ainvoke({"topic": topic}, config)
        article = article_state["article"]
        perspectives = article_state["editors"]
        return StormOutputSchema(article=article, perspectives=perspectives)
